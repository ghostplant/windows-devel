static int vrambuffer[1920*1080];

#define AT(x,y) vrambuffer[((((x)<<4)-(x))<<7)+(y)]

void clear() {
	memset(vrambuffer,0, MENLEN);
}

void flush() {
	memcpy(VRAM, vrambuffer, MENLEN);
}

inline int inner(unsigned x, unsigned y) {
	return (x<1080 && y<1920);
}

inline void draw_point(int x, int y, int color) {
	if (inner(x,y))
		AT(x,y)=color;
}

void draw_line(int x0, int y0, int x1, int y1, int color) {
	int dx, dy, d, com;
	if (x0>x1 || x0==x1 && y0>y1)
		d=x0,x0=x1,x1=d, d=y0,y0=y1,y1=d;
	dx = x1-x0, dy = y1-y0;
	if (!dy) {
		for (d=x0;d<=x1;d++)
			draw_point(d,y0,color);
		return;
	}
	if (!dx) {
		for (d=y0;d<=y1;d++)
			draw_point(x0,d,color);
		return;
	}
	draw_point(x0,y0,color);
	if (dy>0) {
		com = (dy-dx)<<1;
		if (dx>=dy) { // 0<=k<=1
			d = (dy<<1) - dx;
			while (x0<x1) {
				if (d>0)
					d += com, y0++;
				else
					d += dy<<1;
				x0++;
				draw_point(x0,y0,color);
			}
		} else { // k>1
			d = dy - (dx<<1);
			while (y0<y1) {
				if (d<0)
					d += com, x0++;
				else
					d += (-dx)<<1;
				y0++;
				draw_point(x0,y0,color);
			}
		}
	} else {
		com = (dy+dx)<<1;
		if (dx>=-dy) { // -1=<k<0
			d = (dy<<1) + dx;
			while (x0<x1) {
				if (d<0)
					d += com, y0--;
				else
					d += dy<<1;
				x0++;
				draw_point(x0,y0,color);
			}
		} else { // k<-1
			d = dy + (dx<<1);
			while (y0>y1) {
				if (d>0)
					d += com, x0++;
				else
					d += dx<<1;
				y0--;
				draw_point(x0,y0,color);
			}
		}
	}
}

const float SIN[91]={0,0.017452406,0.034899497,0.052335956,0.069756474,0.087155743,0.104528463,0.121869343,0.139173101,0.156434465,0.173648178,0.190808995,0.207911691,0.224951054,0.241921896,0.258819045,0.275637356,
	0.292371705,0.309016994,0.325568154,0.342020143,0.358367950,0.374606593,0.390731128,0.406736643,0.422618262,0.438371147,0.453990500,0.469471563,0.484809620,0.500000000,0.515038075,0.529919264,0.544639035,
	0.559192903,0.573576436,0.587785252,0.601815023,0.615661475,0.629320391,0.642787610,0.656059029,0.669130606,0.681998360,0.694658370,0.707106781,0.719339800,0.731353702,0.743144825,0.754709580,0.766044443,
	0.777145961,0.788010754,0.798635510,0.809016994,0.819152044,0.829037573,0.838670568,0.848048096,0.857167301,0.866025404,0.874619707,0.882947593,0.891006524,0.898794046,0.906307787,0.913545458,0.920504853,
	0.927183855,0.933580426,0.939692621,0.945518576,0.951056516,0.956304756,0.961261696,0.965925826,0.970295726,0.974370065,0.978147601,0.981627183,0.984807753,0.987688341,0.990268069,0.992546152,0.994521895,
	0.996194698,0.997564050,0.998629535,0.999390827,0.999847695,1};

inline float intsin(int deg) {
	if (deg<0) deg=-deg;
	if (deg>360) deg%=360;
	if (deg<=90)
		return SIN[deg];
	else if (deg<=180)
		return SIN[180-deg];
	else if (deg<=270)
		return -SIN[deg-180];
	else
		return -SIN[360-deg];
}

inline float intcos(int deg) {
	return intsin(deg+90);
}

inline float inttan(int deg) {
	if (deg<0) deg=-deg;
	if (deg>180) deg%=180;
	return (deg<=90) ? (SIN[deg]/SIN[90-deg]) : (-SIN[180-deg]/SIN[deg-90]);
}

inline void draw_circle(int cx, int cy, int radius, int color, int sharp) {
	int pre=0, px=cx+radius, py=cy, ang, qx, qy, dx;
	for (dx=sharp; dx<=360; dx+=sharp) {
		qx=cx+(int)(radius*intcos(dx)), qy=cy+(int)(radius*intsin(dx));
		draw_line(px,py,qx,qy,color);
		px=qx, py=qy;
	}
}

const short gfx_asc16[]={0,0,0,0,0,0,0,0,0,33150,33189,48513,33177,32385,0,0,0,65406,65499,50175,65511,32511,0,0,0,0,65132,65278,31998,4152,0,0,0,0,14352,65148,14460,16,0,0,0,6144,15420,59367,6375,15384,0,0,0,6144,32316,65535,6270,15384,0,0,0,0,0,15384,6204,0,0,0,65535,65535,65535,50151,59331,65535,65535,65535,0,0,15360,16998,26178,60,0,0,65535,65535,50175,48537,39357,65475,65535,65535,0,3614,12826,52344,52428,30924,0,0,0,26172,26214,15462,32280,6168,0,0,0,13119,12351,12336,28720,57584,0,0,0,25471,25471,25443,26467,59111,192,0,0,6144,56088,59196,56124,6168,0,0,32768,57536,63728,63742,57584,32960,0,0,512,3590,15902,16126,3614,518,0,0,0,15384,6270,6168,15486,24,0,0,0,26214,26214,26214,102,26214,0,0,0,56191,56283,7035,6939,6939,0,0,31744,24774,27704,50886,14444,50700,124,0,0,0,0,0,65278,65278,0,0,0,15384,6270,6168,15486,32280,0,0,0,15384,6270,6168,6168,6168,0,0,0,6168,6168,6168,32280,6204,0,0,0,0,6144,65036,6156,0,0,0,0,0,12288,65120,12384,0,0,0,0,0,0,49344,65216,0,0,0,0,0,10240,65132,10348,0,0,0,0,0,14352,31800,65148,254,0,0,0,0,65278,31868,14392,16,0,0,0,0,0,0,0,0,0,0,0,15384,15420,6168,24,6168,0,0,26112,26214,36,0,0,0,0,0,0,27648,65132,27756,65132,27756,0,0,6168,50812,49346,1660,34310,31942,6168,0,0,0,50882,6156,24624,34502,0,0,0,27704,14444,56438,52428,30412,0,0,12288,12336,96,0,0,0,0,0,0,6156,12336,12336,12336,3096,0,0,0,6192,3084,3084,3084,12312,0,0,0,0,26112,65340,26172,0,0,0,0,0,6144,32280,6168,0,0,0,0,0,0,0,6144,6168,48,0,0,0,0,65024,0,0,0,0,0,0,0,0,0,6168,0,0,0,0,1538,6156,24624,32960,0,0,0,27704,50886,54998,50886,14444,0,0,0,14360,6264,6168,6168,32280,0,0,0,50812,3078,12312,49248,65222,0,0,0,50812,1542,1596,1542,31942,0,0,0,7180,27708,65228,3084,7692,0,0,0,49406,49344,1788,1542,31942,0,0,0,24632,49344,50940,50886,31942,0,0,0,50942,1542,6156,12336,12336,0,0,0,50812,50886,50812,50886,31942,0,0,0,50812,50886,1662,1542,30732,0,0,0,0,6168,0,6144,24,0,0,0,0,6168,0,6144,12312,0,0,0,1536,6156,24624,6192,1548,0,0,0,0,32256,0,126,0,0,0,0,24576,6192,1548,6156,24624,0,0,0,50812,3270,6168,24,6168,0,0,0,31744,50886,57054,56542,31936,0,0,0,14352,50796,65222,50886,50886,0,0,0,26364,26214,26236,26214,64614,0,0,0,26172,49346,49344,49856,15462,0,0,0,27896,26214,26214,26214,63596,0,0,0,26366,26722,26744,25184,65126,0,0,0,26366,26722,26744,24672,61536,0,0,0,26172,49346,57024,50886,14950,0,0,0,50886,50886,50942,50886,50886,0,0,0,6204,6168,6168,6168,15384,0,0,0,3102,3084,3084,52428,30924,0,0,0,26342,27750,30840,26220,58982,0,0,0,24816,24672,24672,25184,65126,0,0,0,61126,65278,50902,50886,50886,0,0,0,59078,65270,52958,50886,50886,0,0,0,50812,50886,50886,50886,31942,0,0,0,26364,26214,24700,24672,61536,0,0,0,50812,50886,50886,54982,31966,3596,0,0,26364,26214,27772,26214,58982,0,0,0,50812,24774,3128,50694,31942,0,0,0,32382,6234,6168,6168,15384,0,0,0,50886,50886,50886,50886,31942,0,0,0,50886,50886,50886,27846,4152,0,0,0,50886,50886,54998,65238,27886,0,0,0,50886,31852,14392,27772,50886,0,0,0,26214,26214,6204,6168,15384,0,0,0,50942,3206,12312,49760,65222,0,0,0,12348,12336,12336,12336,15408,0,0,0,32768,57536,14448,3612,518,0,0,0,3132,3084,3084,3084,15372,0,0,14352,50796,0,0,0,0,0,0,0,0,0,0,0,0,65280,0,12336,24,0,0,0,0,0,0,0,0,30720,31756,52428,30412,0,0,0,24800,30816,26220,26214,31846,0,0,0,0,31744,49350,49344,31942,0,0,0,3100,15372,52332,52428,30412,0,0,0,0,31744,65222,49344,31942,0,0,0,27704,24676,24816,24672,61536,0,0,0,0,30208,52428,52428,31948,52236,120,0,24800,27744,26230,26214,58982,0,0,0,6168,14336,6168,6168,15384,0,0,0,1542,3584,1542,1542,1542,26214,60,0,24800,26208,30828,27768,58982,0,0,0,6200,6168,6168,6168,15384,0,0,0,0,60416,55038,54998,50902,0,0,0,0,56320,26214,26214,26214,0,0,0,0,31744,50886,50886,31942,0,0,0,0,56320,26214,26214,31846,24672,240,0,0,30208,52428,52428,31948,3084,30,0,0,56320,26230,24672,61536,0,0,0,0,31744,24774,3128,31942,0,0,0,12304,64560,12336,12336,7222,0,0,0,0,52224,52428,52428,30412,0,0,0,0,26112,26214,26214,6204,0,0,0,0,50688,54982,54998,27902,0,0,0,0,50688,14444,14392,50796,0,0,0,0,50688,50886,50886,32454,3078,248,0,0,65024,6348,24624,65222,0,0,0,6158,6168,6256,6168,3608,0,0,0,6168,6168,6144,6168,6168,0,0,0,6256,6168,6158,6168,28696,0,0,0,56438,0,0,0,0,0,0,0,0,14352,50796,50886,254,0,0,0,26172,49346,49344,26306,3132,31750,0,0,204,52224,52428,52428,30412,0,0,3072,12312,31744,65222,49344,31942,0,0,4096,27704,30720,31756,52428,30412,0,0,0,204,30720,31756,52428,30412,0,0,24576,6192,30720,31756,52428,30412,0,0,14336,14444,30720,31756,52428,30412,0,0,0,0,26172,24672,15462,1548,60,0,4096,27704,31744,65222,49344,31942,0,0,0,198,31744,65222,49344,31942,0,0,24576,6192,31744,65222,49344,31942,0,0,0,102,14336,6168,6168,15384,0,0,6144,26172,14336,6168,6168,15384,0,0,24576,6192,14336,6168,6168,15384,0,0,50688,4096,27704,50886,50942,50886,0,0,27704,56,27704,50886,50942,50886,0,0,12312,96,26366,31840,24672,65126,0,0,0,0,52224,13942,55422,28376,0,0,0,27710,52428,52478,52428,52940,0,0,4096,27704,31744,50886,50886,31942,0,0,0,198,31744,50886,50886,31942,0,0,24576,6192,31744,50886,50886,31942,0,0,12288,52344,52224,52428,52428,30412,0,0,24576,6192,52224,52428,52428,30412,0,0,0,198,50688,50886,50886,32454,3078,120,50688,31744,50886,50886,50886,31942,0,0,50688,50688,50886,50886,50886,31942,0,0,6144,15384,24678,24672,15462,6168,0,0,14336,25708,61536,24672,24672,64742,0,0,0,26214,6204,6270,6270,6168,0,0,63488,52428,50424,57036,52428,50892,0,0,3584,6171,6168,6270,6168,6168,28888,0,6144,24624,30720,31756,52428,30412,0,0,3072,12312,14336,6168,6168,15384,0,0,6144,24624,31744,50886,50886,31942,0,0,6144,24624,52224,52428,52428,30412,0,0,0,56438,56320,26214,26214,26214,0,0,56438,50688,63206,57086,50894,50886,0,0,15360,27756,62,126,0,0,0,0,14336,27756,56,124,0,0,0,0,0,12336,12288,24624,50880,31942,0,0,0,0,0,49406,49344,192,0,0,0,0,0,1790,1542,6,0,0,49152,49856,52422,12312,56416,3206,15896,0,49152,49856,52422,12312,52838,16030,1542,0,0,6168,6144,6168,15420,6204,0,0,0,0,13824,55404,13932,0,0,0,0,0,55296,13932,55404,0,0,0,17425,17425,17425,17425,17425,17425,17425,17425,43605,43605,43605,43605,43605,43605,43605,43605,30685,30685,30685,30685,30685,30685,30685,30685,6168,6168,6168,6168,6168,6168,6168,6168,6168,6168,6168,63512,6168,6168,6168,6168,6168,6168,63512,63512,6168,6168,6168,6168,13878,13878,13878,63030,13878,13878,13878,13878,0,0,0,65024,13878,13878,13878,13878,0,0,63488,63512,6168,6168,6168,6168,13878,13878,63030,62982,13878,13878,13878,13878,13878,13878,13878,13878,13878,13878,13878,13878,0,0,65024,62982,13878,13878,13878,13878,13878,13878,63030,65030,0,0,0,0,13878,13878,13878,65078,0,0,0,0,6168,6168,63512,63512,0,0,0,0,0,0,0,63488,6168,6168,6168,6168,6168,6168,6168,7960,0,0,0,0,6168,6168,6168,65304,0,0,0,0,0,0,0,65280,6168,6168,6168,6168,6168,6168,6168,7960,6168,6168,6168,6168,0,0,0,65280,0,0,0,0,6168,6168,6168,65304,6168,6168,6168,6168,6168,6168,7960,7960,6168,6168,6168,6168,13878,13878,13878,14134,13878,13878,13878,13878,13878,13878,14134,16176,0,0,0,0,0,0,16128,14128,13878,13878,13878,13878,13878,13878,63286,65280,0,0,0,0,0,0,65280,63232,13878,13878,13878,13878,13878,13878,14134,14128,13878,13878,13878,13878,0,0,65280,65280,0,0,0,0,13878,13878,63286,63232,13878,13878,13878,13878,6168,6168,65304,65280,0,0,0,0,13878,13878,13878,65334,0,0,0,0,0,0,65280,65280,6168,6168,6168,6168,0,0,0,65280,13878,13878,13878,13878,13878,13878,13878,16182,0,0,0,0,6168,6168,7960,7960,0,0,0,0,0,0,7936,7960,6168,6168,6168,6168,0,0,0,16128,13878,13878,13878,13878,13878,13878,13878,65334,13878,13878,13878,13878,6168,6168,65304,65304,6168,6168,6168,6168,6168,6168,6168,63512,0,0,0,0,0,0,0,7936,6168,6168,6168,6168,65535,65535,65535,65535,65535,65535,65535,65535,0,0,0,65280,65535,65535,65535,65535,61680,61680,61680,61680,61680,61680,61680,61680,3855,3855,3855,3855,3855,3855,3855,3855,65535,65535,65535,255,0,0,0,0,0,0,30208,55516,55512,30428,0,0,0,52344,52428,52440,50886,52422,0,0,0,50942,49350,49344,49344,49344,0,0,0,0,27902,27756,27756,27756,0,0,0,65024,24774,6192,24624,65222,0,0,0,0,32256,55512,55512,28888,0,0,0,0,26214,26214,31846,24672,192,0,0,0,56438,6168,6168,6168,0,0,0,32256,15384,26214,15462,32280,0,0,0,14336,50796,65222,50886,14444,0,0,0,27704,50886,27846,27756,61036,0,0,0,12318,3096,26174,26214,15462,0,0,0,0,32256,56283,32475,0,0,0,0,768,32262,56283,32499,49248,0,0,0,12316,24672,24700,24672,7216,0,0,0,31744,50886,50886,50886,50886,0,0,0,0,254,65024,0,254,0,0,0,0,6168,6270,24,65280,0,0,0,12288,3096,3078,12312,32256,0,0,0,3072,12312,12384,3096,32256,0,0,0,6926,6171,6168,6168,6168,6168,6168,6168,6168,6168,6168,55512,28888,0,0,0,0,6168,32256,6144,24,0,0,0,0,30208,220,56438,0,0,0,14336,27756,56,0,0,0,0,0,0,0,0,6144,24,0,0,0,0,0,0,0,24,0,0,0,3840,3084,3084,60428,27756,7228,0,0,55296,27756,27756,108,0,0,0,0,28672,12504,51296,248,0,0,0,0,0,0,31868,31868,31868,124,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,};

void draw_ascii(int bx, int by, char ch, int color) {
	char* off=(char*)(gfx_asc16+(ch<<3));
	int i,j,x=0,y=0;
	for (i=0;i<16;i++,off++) {
		x=0,y++;
		for (j=0;j<8;x++,j++)
			if ((*off)&(0x80>>j))
				draw_point(by+y,bx+x,color);
	}
}

void draw_text(int bx, int by, const char *s, int color) {
	int x=bx, y=by;
	while (*s) {
		if (*s=='\n')
			by+=16,x=bx,y=by;
		else
			draw_ascii(x,y,s[0],color),x+=8;
		++s;
	}
}